// OBSERVERS
// Ember supports observing any property, including computed properties. 
// set up observer -> using observes method on function
Person = Ember.Object.extend({
	firstName: null,
	lastName: null,
	
	fullName: function() {
		var firstName = this.get('firstName');
		var lastName = this.get('lastName');
		return firstName + ' ' + lastName;
	}.property('firstName', 'lastName'),
	
	fullNameChanged: function() {
		//deal with change
	}.observes('fullName').on('init')
});
var person = Person.create({
	firstName: 'Yehuda',
	lastName: 'Katz'
});
person.set('firstName', 'Brohuda'); // observer will fire
// because fillName depends on firstName, updating firstName 
// will fire observers on fullName as well

// OBSERVERS AND ASYNCHRONY
// Observers are currently synchronous. It means they will fire as soon as 
// one of properties they observe changes. -> can lead to bugs
Person.reopen({
  lastNameChanged: function() {
    // The observer depends on lastName and so does fullName. Because observers
    // are synchronous, when this function is called the value of fullName is
    // not updated yet so this will log the old value of fullName
    console.log(this.get('fullName'));
  }.observes('lastName')
});
// This can also lead to observers being fired multiple times when 
// observing multiple properties
Person.reopen({
  partOfNameChanged: function() {
    // Because both firstName and lastName were set, this observer will fire twice.
  }.observes('firstName', 'lastName')
});
person.set('firstName', 'John');
person.set('lastName', 'Smith');
// To get around ---> use Ember.run.once This will ensure that any processing will
// happen once and happens in the next run loop once all bindings are synchronized
Person.reopen({
	partOfNameChanged: function() {
		Ember.run.once(this, 'processFullName');
	}.observes('firstName', 'lastName'),
	
	processFullName: function() {
	// This will only fire once if you set two properties at the same time, and
    // will also happen in the next run loop once all properties are synchronized
    console.log(this.get('fullName'));
	}
});
person.set('firstName', 'John');
person.set('lastName', 'Smith');
// OBSERVERS AND OBJECT INITIALIZATION
// Observers never fire until after initialization of an object is complete
// If observer firing as part of initialization process
// --> specify that observer should also run after init by using .on('init')
App.Person = Ember.Object.extend({
	init: function() {
		this.set('salutation', "Mr/Ms");
	},
	salutationDidChange: function() {
	// some side effects of salutation changing
	}.observes('salutation').on('init')
});
// UNCONSUMED COMPUTED PROPERTIES DO NOT TRIGGER OBSERVERS
// if never get a computed property -> its observers will not fire on key changes
// without prototype extensions

Person.reopen({
	fullNameChanged: Ember.observer('fullName', function() {
		// deal with the change
	})
});
// OUTSIDE OF CLASS DEFINITION
person.addObserver('fullName', function() {
	// deal with the change
});















