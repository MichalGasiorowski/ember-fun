//Classes and Instances
//Defining class: (defines App.Person class with say() method
App.Person = Ember.Object.extend({
	say: function(thing) {
		alert(thing);
	}
});
//subclass of existing class:
App.PersonView = Ember.View.extend({
	tagName: 'li',
	classNameBindings: ['isAdministrator']
});

//can override methods but still access impl. of parent by calling _super():

App.Person = Ember.Object.extend({
	say: function(thing) {
		var name = this.get('name');
		alert(name + " says: " + thing);
	}
});
App.Soldier = App.Person.extend({
	say: function(thing) {
		this._super(thing + ", sir!");
	}
});
var yehuda = App.Soldier.create({
	name: "Yehuda Katz"
});
yehuda.say("Yes");

//** CREATING INSTANCES **/
// after defining class, can create instances by calling create() method
var person = App.Person.create();
person.say("Hello");
// when creating, can iniitialize value of properties by passing optional hash:
App.Person = Ember.Object.extend({
	helloWorld: function() {
		alert("Hi, my name is " + this.get('name'));
	}
});
var tom = App.Person.create({
	name: "Tome Dale"
});
tom.helloWorld();
// for performance reasons, it is NOT possible to redefine instance computed 
// properties or methods when calling create(), NO creating new ones...
// --> only set simple properties with create(). MORE -> subclass
// CONVENTION -> properties, variables holding classes : PascalCased, instances -> NOT
// ex: App.Person -> pointing to class ; person -> pointing to instance

//** INITIALIZING INSTANCES **/
// When new instance created -> init method is invoked automatically. 
App.Person = Ember.Object.extend({
	init: function() {
		var name = this.get('name');
		alert(name + ", reporting for duty!");
	}
});
App.Person.create({
	name: "Stefan Penner"
});
// --> when subclassing  a framework class (Ember.View or Ember.ArrayController)
// if overriding init() --> make sure to call this._super() in init()
// When  accesing properties of object -> use get & set 
var person = App.Person.create();
var name = person.get('name');
person.set('name', "Crazy Mike");
// --> USE accessor methods otherwise computed properties won't recalculate, 
// observers won't fire and templates won't update






